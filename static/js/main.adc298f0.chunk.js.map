{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","all","userId","userImg","userName","userProfileImg","userTitle","en","tw","channel","toEngChannel","setState","toAllChannel","toTwChannel","axios","url","method","headers","then","response","console","log","concat","data","map","user_id","thumbnail_url","replace","title","join","login","profile_image_url","streamData","this","i","length","push","className","onClick","href","target","key","rel","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.adc298f0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    all: {\n      userId: [],\n      userImg: [],\n      userName: [],\n      userProfileImg: [],\n      userTitle: []\n    },\n    en: {\n      userId: [],\n      userImg: [],\n      userName: [],\n      userProfileImg: [],\n      userTitle: []\n    },\n    tw: {\n      userId: [],\n      userImg: [],\n      userName: [],\n      userProfileImg: [],\n      userTitle: []\n    },\n    channel: \"all\"\n  };\n\n  componentDidMount() {\n    const optionall = {\n      url: \"https://api.twitch.tv/helix/streams?first=24&game_id=29307\",\n      method: \"GET\",\n      headers: {\n        \"client-id\": \"wbd4r8kqc3urx0xd5f4fd4797nfr18\"\n      }\n    };\n    const optionEng = {\n      url:\n        \"https://api.twitch.tv/helix/streams?first=24&game_id=29307&language=en\",\n      method: \"GET\",\n      headers: {\n        \"client-id\": \"wbd4r8kqc3urx0xd5f4fd4797nfr18\"\n      }\n    };\n    const optionTw = {\n      url:\n        \"https://api.twitch.tv/helix/streams?first=24&game_id=29307&language=zh\",\n      method: \"GET\",\n      headers: {\n        \"client-id\": \"wbd4r8kqc3urx0xd5f4fd4797nfr18\"\n      }\n    };\n\n    axios(optionEng)\n      .then(response => {\n        console.log(response);\n        this.setState({\n          ...this.state,\n          en: {\n            ...this.state.en,\n            userId: this.state.en.userId.concat(\n              response.data.data.map(data => \"id=\" + data.user_id)\n            ),\n            userImg: this.state.en.userImg.concat(\n              response.data.data.map(data =>\n                data.thumbnail_url.replace(\"{width}x{height}\", \"720x400\")\n              )\n            ),\n            userTitle: this.state.en.userTitle.concat(\n              response.data.data.map(data => data.title)\n            )\n          }\n        });\n      })\n      .then(() => {\n        axios({\n          url: `https://api.twitch.tv/helix/users?${this.state.en.userId.join(\n            \"&\"\n          )}`,\n          method: \"GET\",\n          headers: {\n            \"client-id\": \"wbd4r8kqc3urx0xd5f4fd4797nfr18\"\n          }\n        }).then(response => {\n          console.log(response);\n          this.setState({\n            en: {\n              ...this.state.en,\n              userName: this.state.en.userName.concat(\n                response.data.data.map(data => data.login)\n              ),\n              userProfileImg: this.state.en.userProfileImg.concat(\n                response.data.data.map(data => data.profile_image_url)\n              )\n            }\n          });\n        });\n      });\n\n    axios(optionall)\n      .then(response => {\n        console.log(response);\n        this.setState({\n          ...this.state,\n          all: {\n            ...this.state.all,\n            userId: this.state.all.userId.concat(\n              response.data.data.map(data => \"id=\" + data.user_id)\n            ),\n            userImg: this.state.all.userImg.concat(\n              response.data.data.map(data =>\n                data.thumbnail_url.replace(\"{width}x{height}\", \"720x400\")\n              )\n            ),\n            userTitle: this.state.all.userTitle.concat(\n              response.data.data.map(data => data.title)\n            )\n          }\n        });\n      })\n      .then(() => {\n        axios({\n          url: `https://api.twitch.tv/helix/users?${this.state.all.userId.join(\n            \"&\"\n          )}`,\n          method: \"GET\",\n          headers: {\n            \"client-id\": \"wbd4r8kqc3urx0xd5f4fd4797nfr18\"\n          }\n        }).then(response => {\n          console.log(response);\n          this.setState({\n            all: {\n              ...this.state.all,\n              userName: this.state.all.userName.concat(\n                response.data.data.map(data => data.login)\n              ),\n              userProfileImg: this.state.all.userProfileImg.concat(\n                response.data.data.map(data => data.profile_image_url)\n              )\n            }\n          });\n        });\n      });\n\n    axios(optionTw)\n      .then(response => {\n        console.log(response);\n        this.setState({\n          ...this.state,\n          tw: {\n            ...this.state.tw,\n            userId: this.state.tw.userId.concat(\n              response.data.data.map(data => \"id=\" + data.user_id)\n            ),\n            userImg: this.state.tw.userImg.concat(\n              response.data.data.map(data =>\n                data.thumbnail_url.replace(\"{width}x{height}\", \"720x400\")\n              )\n            ),\n            userTitle: this.state.tw.userTitle.concat(\n              response.data.data.map(data => data.title)\n            )\n          }\n        });\n      })\n      .then(() => {\n        axios({\n          url: `https://api.twitch.tv/helix/users?${this.state.tw.userId.join(\n            \"&\"\n          )}`,\n          method: \"GET\",\n          headers: {\n            \"client-id\": \"wbd4r8kqc3urx0xd5f4fd4797nfr18\"\n          }\n        }).then(response => {\n          console.log(response);\n          this.setState({\n            tw: {\n              ...this.state.tw,\n              userName: this.state.tw.userName.concat(\n                response.data.data.map(data => data.login)\n              ),\n              userProfileImg: this.state.tw.userProfileImg.concat(\n                response.data.data.map(data => data.profile_image_url)\n              )\n            }\n          });\n        });\n      });\n  }\n\n  toEngChannel = () => {\n    this.setState({ ...this.state, channel: \"en\" });\n  };\n\n  toAllChannel = () => {\n    this.setState({ ...this.state, channel: \"all\" });\n  };\n\n  toTwChannel = () => {\n    this.setState({ ...this.state, channel: \"tw\" });\n  };\n\n  render() {\n    let streamData = [];\n    let userName, userImg, userProfileImg, title;\n    switch (this.state.channel) {\n      case \"all\":\n        streamData = [];\n        userName = this.state.all.userName;\n        userImg = this.state.all.userImg;\n        userProfileImg = this.state.all.userProfileImg;\n        title = this.state.all.userTitle;\n        for (let i = 0; i < userName.length; i++) {\n          streamData.push({\n            userName: userName[i],\n            userImg: userImg[i],\n            userProfileImg: userProfileImg[i],\n            title: title[i]\n          });\n        }\n        break;\n\n      case \"en\":\n        streamData = [];\n        userName = this.state.en.userName;\n        userImg = this.state.en.userImg;\n        userProfileImg = this.state.en.userProfileImg;\n        title = this.state.en.userTitle;\n        for (let i = 0; i < userName.length; i++) {\n          streamData.push({\n            userName: userName[i],\n            userImg: userImg[i],\n            userProfileImg: userProfileImg[i],\n            title: title[i]\n          });\n        }\n        break;\n      case \"tw\":\n        streamData = [];\n        userName = this.state.tw.userName;\n        userImg = this.state.tw.userImg;\n        userProfileImg = this.state.tw.userProfileImg;\n        title = this.state.tw.userTitle;\n        for (let i = 0; i < userName.length; i++) {\n          streamData.push({\n            userName: userName[i],\n            userImg: userImg[i],\n            userProfileImg: userProfileImg[i],\n            title: title[i]\n          });\n        }\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <>\n        <div className=\"nav\">\n          <div className=\"channel\" onClick={this.toAllChannel}>\n            All \n          </div>\n          <div className=\"channel\" onClick={this.toEngChannel}>\n            English \n          </div>\n          <div className=\"channel\" onClick={this.toTwChannel}>\n            Taiwan \n          </div>\n        </div>\n        <p className=\"header\">Path of Exile</p>\n        <p className=\"description\">\n          Top popular live streams sorted by current viewers\n        </p>\n        <div className=\"streamsContainer\">\n          {streamData.map(data => (\n            <a\n              href={\"https://www.twitch.tv/\" + data.userName}\n              target=\"_blank\"\n              key={data.userName}\n              className=\"streams\"\n              rel=\"noopener noreferrer\"\n            >\n              <img\n                src={data.userImg}\n                alt=\"Stream thumbnail\"\n                className=\"streamsImg\"\n              />\n              <div className=\"profile\">\n                <div className=\"profileImgContainer\">\n                  <img\n                    src={data.userProfileImg}\n                    alt=\"ProfileImg\"\n                    className=\"profileImg\"\n                  />\n                </div>\n\n                <div className=\"detail\">\n                  <div className=\"title\">{data.title}</div>\n                  <div className=\"name\">{data.userName}</div>\n                </div>\n              </div>\n            </a>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}