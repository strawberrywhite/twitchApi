{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","userId","userImg","userName","userProfileImg","userTitle","axios","url","method","headers","then","response","console","log","setState","concat","data","map","user_id","thumbnail_url","replace","title","join","login","profile_image_url","streamData","this","i","length","push","className","href","target","key","rel","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySA6HeA,G,iNAxHbC,MAAQ,CACNC,OAAQ,GACRC,QAAS,GACTC,SAAU,GACVC,eAAgB,GAChBC,UAAW,I,mFAGQ,IAAD,OASlBC,IARe,CACbC,IAAK,yEACLC,OAAQ,MACRC,QAAS,CACP,YAAa,oCAKdC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZb,OAAQ,EAAKD,MAAMC,OAAOc,OACxBJ,EAASK,KAAKA,KAAKC,KAAI,SAAAD,GAAI,MAAI,MAAQA,EAAKE,YAE9ChB,QAAS,EAAKF,MAAME,QAAQa,OAC1BJ,EAASK,KAAKA,KAAKC,KAAI,SAAAD,GAAI,OACzBA,EAAKG,cAAcC,QAAQ,mBAAoB,eAGnDf,UAAW,EAAKL,MAAMK,UAAUU,OAC9BJ,EAASK,KAAKA,KAAKC,KAAI,SAAAD,GAAI,OAAIA,EAAKK,eAIzCX,MAAK,WACJJ,IAAM,CACJC,IAAI,qCAAD,OAAuC,EAAKP,MAAMC,OAAOqB,KAC1D,MAEFd,OAAQ,MACRC,QAAS,CACP,YAAa,oCAEdC,MAAK,SAAAC,GACN,EAAKG,SAAL,eACK,EAAKd,MADV,CAEEG,SAAU,EAAKH,MAAMG,SAASY,OAC5BJ,EAASK,KAAKA,KAAKC,KAAI,SAAAD,GAAI,OAAIA,EAAKO,UAEtCnB,eAAgB,EAAKJ,MAAMI,eAAeW,OACxCJ,EAASK,KAAKA,KAAKC,KAAI,SAAAD,GAAI,OAAIA,EAAKQ,iC,+BAa9C,IALA,IAAIC,EAAa,GACXtB,EAAWuB,KAAK1B,MAAMG,SACtBD,EAAUwB,KAAK1B,MAAME,QACrBE,EAAiBsB,KAAK1B,MAAMI,eAC5BiB,EAAQK,KAAK1B,MAAMK,UAChBsB,EAAI,EAAGA,EAAIxB,EAASyB,OAAQD,IACnCF,EAAWI,KAAK,CACd1B,SAAUA,EAASwB,GACnBzB,QAASA,EAAQyB,GACjBvB,eAAgBA,EAAeuB,GAC/BN,MAAOA,EAAMM,KAIjB,OACE,oCACE,yBAAKG,UAAU,OACb,yBAAKA,UAAU,WAAf,eACA,yBAAKA,UAAU,WAAf,oBACA,yBAAKA,UAAU,WAAf,mBAEF,uBAAGA,UAAU,UAAb,iBACA,uBAAGA,UAAU,eAAb,yDAGA,yBAAKA,UAAU,oBACZL,EAAWR,KAAI,SAAAD,GAAI,OAClB,uBACEe,KAAM,yBAA2Bf,EAAKb,SACtC6B,OAAO,SACPC,IAAKjB,EAAKb,SACV2B,UAAU,UACVI,IAAI,uBAEJ,yBACEC,IAAKnB,EAAKd,QACVkC,IAAI,mBACJN,UAAU,eAEZ,yBAAKA,UAAU,WACb,yBAAKA,UAAU,uBACb,yBACEK,IAAKnB,EAAKZ,eACVgC,IAAI,aACJN,UAAU,gBAIhB,yBAAKA,UAAU,UACX,yBAAKA,UAAU,SAASd,EAAKK,OAC7B,yBAAKS,UAAU,QAAQd,EAAKb,sB,GA7G5BkC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.c173cef8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    userId: [],\n    userImg: [],\n    userName: [],\n    userProfileImg: [],\n    userTitle: []\n  };\n\n  componentDidMount() {\n    const option = {\n      url: \"https://api.twitch.tv/helix/streams?first=24&game_id=29307&language=zh\",\n      method: \"GET\",\n      headers: {\n        \"client-id\": \"wbd4r8kqc3urx0xd5f4fd4797nfr18\"\n      }\n    };\n\n    axios(option)\n      .then(response => {\n        console.log(response);\n        this.setState({\n          userId: this.state.userId.concat(\n            response.data.data.map(data => \"id=\" + data.user_id)\n          ),\n          userImg: this.state.userImg.concat(\n            response.data.data.map(data =>\n              data.thumbnail_url.replace(\"{width}x{height}\", \"720x400\")\n            )\n          ),\n          userTitle: this.state.userTitle.concat(\n            response.data.data.map(data => data.title)\n          )\n        });\n      })\n      .then(() => {\n        axios({\n          url: `https://api.twitch.tv/helix/users?${this.state.userId.join(\n            \"&\"\n          )}`,\n          method: \"GET\",\n          headers: {\n            \"client-id\": \"wbd4r8kqc3urx0xd5f4fd4797nfr18\"\n          }\n        }).then(response => {\n          this.setState({\n            ...this.state,\n            userName: this.state.userName.concat(\n              response.data.data.map(data => data.login)\n            ),\n            userProfileImg: this.state.userProfileImg.concat(\n              response.data.data.map(data => data.profile_image_url)\n            )\n          });\n        });\n      });\n  }\n\n  render() {\n    let streamData = [];\n    const userName = this.state.userName;\n    const userImg = this.state.userImg;\n    const userProfileImg = this.state.userProfileImg;\n    const title = this.state.userTitle;\n    for (let i = 0; i < userName.length; i++) {\n      streamData.push({\n        userName: userName[i],\n        userImg: userImg[i],\n        userProfileImg: userProfileImg[i],\n        title: title[i]\n      });\n    }\n\n    return (\n      <>\n        <div className=\"nav\">\n          <div className=\"channel\">All Channel</div>\n          <div className=\"channel\">English Channel </div>\n          <div className=\"channel\">Taiwan Channel</div>\n        </div>\n        <p className=\"header\">Path of Exile</p>\n        <p className=\"description\">\n          Top 24 popular live streams sorted by current viewers\n        </p>\n        <div className=\"streamsContainer\">\n          {streamData.map(data => (\n            <a\n              href={\"https://www.twitch.tv/\" + data.userName}\n              target=\"_blank\"\n              key={data.userName}\n              className=\"streams\"\n              rel=\"noopener noreferrer\"\n            >\n              <img\n                src={data.userImg}\n                alt=\"Stream thumbnail\"\n                className=\"streamsImg\"\n              />\n              <div className=\"profile\">\n                <div className=\"profileImgContainer\">\n                  <img\n                    src={data.userProfileImg}\n                    alt=\"ProfileImg\"\n                    className=\"profileImg\"\n                  />\n                </div>\n\n              <div className=\"detail\">\n                  <div className=\"title\">{data.title}</div>\n                  <div className=\"name\">{data.userName}</div>\n              </div>\n\n              </div>\n            </a>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}